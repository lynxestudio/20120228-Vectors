using System;
using System.Text;

namespace VectorSpaces
{
	public class Vector
	{
		double[] _components;
		Vector(){}
		public Vector(double[] components){
			this._components = components;
		}
		public double[] GetComponents(){
			return _components;
		}
		public Vector(Vector v){
			this._components = v.GetComponents();
		}
		public static Vector operator +(Vector u,Vector v){
			double[] resp = null;
			Vector r = null;
			if(u != null && v != null)
			{
				 resp = new double[u.Length];
			if(u.Length != v.Length)
				throw new ApplicationException("Vectors length must be equals in Length");
			else{
				for(int i = 0; i < u.Length;i++)
				{
					resp[i] = u.GetComponents()[i] + v.GetComponents()[i];
				}
					 r = new Vector(resp);
			}
			}
			return r;
		}
		public static Vector operator *(double d,Vector v){
			return scalarMultiplicacion(d,v);
		}
		public static Vector operator *(Vector v,double d){
			return scalarMultiplicacion(d,v);
		}
		static Vector scalarMultiplicacion(double d,Vector v){
			double[] resp = new double[v.Length];
			Vector r = null;
			for(int i = 0;i < v.Length;i++)
				resp[i] = v.GetComponents ()[i] * d;
			r = new Vector(resp);
			return r;
		}
		public int Length{ get{ return _components.Length;}}
		public override string ToString ()
		{
			StringBuilder buf = new StringBuilder();
			foreach(double d in _components){
				buf.AppendFormat("[{0}] ",d.ToString());
			}
			return buf.ToString();
		}
	}
}

